#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Creatosh DB SQL")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCategory_In_Subject(Category_In_Subject instance);
    partial void UpdateCategory_In_Subject(Category_In_Subject instance);
    partial void DeleteCategory_In_Subject(Category_In_Subject instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertGrade_Level(Grade_Level instance);
    partial void UpdateGrade_Level(Grade_Level instance);
    partial void DeleteGrade_Level(Grade_Level instance);
    partial void InsertMetrics_Rating(Metrics_Rating instance);
    partial void UpdateMetrics_Rating(Metrics_Rating instance);
    partial void DeleteMetrics_Rating(Metrics_Rating instance);
    partial void InsertSchool(School instance);
    partial void UpdateSchool(School instance);
    partial void DeleteSchool(School instance);
    partial void InsertStudent_In_Class(Student_In_Class instance);
    partial void UpdateStudent_In_Class(Student_In_Class instance);
    partial void DeleteStudent_In_Class(Student_In_Class instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertSystem_Administor(System_Administor instance);
    partial void UpdateSystem_Administor(System_Administor instance);
    partial void DeleteSystem_Administor(System_Administor instance);
    partial void InsertTeacher_In_Class(Teacher_In_Class instance);
    partial void UpdateTeacher_In_Class(Teacher_In_Class instance);
    partial void DeleteTeacher_In_Class(Teacher_In_Class instance);
    partial void InsertType_of_user(Type_of_user instance);
    partial void UpdateType_of_user(Type_of_user instance);
    partial void DeleteType_of_user(Type_of_user instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Creatosh_DB_SQLConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Category_In_Subject> Category_In_Subjects
		{
			get
			{
				return this.GetTable<Category_In_Subject>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Grade_Level> Grade_Levels
		{
			get
			{
				return this.GetTable<Grade_Level>();
			}
		}
		
		public System.Data.Linq.Table<Metrics_Rating> Metrics_Ratings
		{
			get
			{
				return this.GetTable<Metrics_Rating>();
			}
		}
		
		public System.Data.Linq.Table<School> Schools
		{
			get
			{
				return this.GetTable<School>();
			}
		}
		
		public System.Data.Linq.Table<Student_In_Class> Student_In_Classes
		{
			get
			{
				return this.GetTable<Student_In_Class>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<System_Administor> System_Administors
		{
			get
			{
				return this.GetTable<System_Administor>();
			}
		}
		
		public System.Data.Linq.Table<Teacher_In_Class> Teacher_In_Classes
		{
			get
			{
				return this.GetTable<Teacher_In_Class>();
			}
		}
		
		public System.Data.Linq.Table<Type_of_user> Type_of_users
		{
			get
			{
				return this.GetTable<Type_of_user>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activities")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _game_ID;
		
		private int _user_ID_send;
		
		private int _user_ID_receive;
		
		private string _comment;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongame_IDChanging(int value);
    partial void Ongame_IDChanged();
    partial void Onuser_ID_sendChanging(int value);
    partial void Onuser_ID_sendChanged();
    partial void Onuser_ID_receiveChanging(int value);
    partial void Onuser_ID_receiveChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public Activity()
		{
			this._Game = default(EntityRef<Game>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int game_ID
		{
			get
			{
				return this._game_ID;
			}
			set
			{
				if ((this._game_ID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongame_IDChanging(value);
					this.SendPropertyChanging();
					this._game_ID = value;
					this.SendPropertyChanged("game_ID");
					this.Ongame_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_ID_send", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_ID_send
		{
			get
			{
				return this._user_ID_send;
			}
			set
			{
				if ((this._user_ID_send != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_ID_sendChanging(value);
					this.SendPropertyChanging();
					this._user_ID_send = value;
					this.SendPropertyChanged("user_ID_send");
					this.Onuser_ID_sendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_ID_receive", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_ID_receive
		{
			get
			{
				return this._user_ID_receive;
			}
			set
			{
				if ((this._user_ID_receive != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_ID_receiveChanging(value);
					this.SendPropertyChanging();
					this._user_ID_receive = value;
					this.SendPropertyChanged("user_ID_receive");
					this.Onuser_ID_receiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Activity", Storage="_Game", ThisKey="game_ID", OtherKey="game_ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._game_ID = value.game_ID;
					}
					else
					{
						this._game_ID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Activity", Storage="_User", ThisKey="user_ID_receive", OtherKey="user_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._user_ID_receive = value.user_ID;
					}
					else
					{
						this._user_ID_receive = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Activity1", Storage="_User1", ThisKey="user_ID_send", OtherKey="user_ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Activities1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Activities1.Add(this);
						this._user_ID_send = value.user_ID;
					}
					else
					{
						this._user_ID_send = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private EntitySet<Category_In_Subject> _Category_In_Subjects;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Category()
		{
			this._Category_In_Subjects = new EntitySet<Category_In_Subject>(new Action<Category_In_Subject>(this.attach_Category_In_Subjects), new Action<Category_In_Subject>(this.detach_Category_In_Subjects));
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category_In_Subject", Storage="_Category_In_Subjects", ThisKey="name", OtherKey="categoryName")]
		public EntitySet<Category_In_Subject> Category_In_Subjects
		{
			get
			{
				return this._Category_In_Subjects;
			}
			set
			{
				this._Category_In_Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Game", Storage="_Games", ThisKey="name", OtherKey="category")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_In_Subjects(Category_In_Subject entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Category_In_Subjects(Category_In_Subject entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_In_Subject")]
	public partial class Category_In_Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _categoryName;
		
		private string _subjectName;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncategoryNameChanging(string value);
    partial void OncategoryNameChanged();
    partial void OnsubjectNameChanging(string value);
    partial void OnsubjectNameChanged();
    #endregion
		
		public Category_In_Subject()
		{
			this._Category = default(EntityRef<Category>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryName", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string categoryName
		{
			get
			{
				return this._categoryName;
			}
			set
			{
				if ((this._categoryName != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryNameChanging(value);
					this.SendPropertyChanging();
					this._categoryName = value;
					this.SendPropertyChanged("categoryName");
					this.OncategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectName", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string subjectName
		{
			get
			{
				return this._subjectName;
			}
			set
			{
				if ((this._subjectName != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectNameChanging(value);
					this.SendPropertyChanging();
					this._subjectName = value;
					this.SendPropertyChanged("subjectName");
					this.OnsubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category_In_Subject", Storage="_Category", ThisKey="categoryName", OtherKey="name", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Category_In_Subjects.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Category_In_Subjects.Add(this);
						this._categoryName = value.name;
					}
					else
					{
						this._categoryName = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Category_In_Subject", Storage="_Subject", ThisKey="subjectName", OtherKey="name", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Category_In_Subjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Category_In_Subjects.Add(this);
						this._subjectName = value.name;
					}
					else
					{
						this._subjectName = default(string);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _school_name;
		
		private int _grade_level;
		
		private string _name;
		
		private EntitySet<Student_In_Class> _Student_In_Classes;
		
		private EntitySet<Teacher_In_Class> _Teacher_In_Classes;
		
		private EntityRef<Grade_Level> _Grade_Level1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onschool_nameChanging(string value);
    partial void Onschool_nameChanged();
    partial void Ongrade_levelChanging(int value);
    partial void Ongrade_levelChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Class()
		{
			this._Student_In_Classes = new EntitySet<Student_In_Class>(new Action<Student_In_Class>(this.attach_Student_In_Classes), new Action<Student_In_Class>(this.detach_Student_In_Classes));
			this._Teacher_In_Classes = new EntitySet<Teacher_In_Class>(new Action<Teacher_In_Class>(this.attach_Teacher_In_Classes), new Action<Teacher_In_Class>(this.detach_Teacher_In_Classes));
			this._Grade_Level1 = default(EntityRef<Grade_Level>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string school_name
		{
			get
			{
				return this._school_name;
			}
			set
			{
				if ((this._school_name != value))
				{
					if (this._Grade_Level1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onschool_nameChanging(value);
					this.SendPropertyChanging();
					this._school_name = value;
					this.SendPropertyChanged("school_name");
					this.Onschool_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade_level", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int grade_level
		{
			get
			{
				return this._grade_level;
			}
			set
			{
				if ((this._grade_level != value))
				{
					if (this._Grade_Level1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongrade_levelChanging(value);
					this.SendPropertyChanging();
					this._grade_level = value;
					this.SendPropertyChanged("grade_level");
					this.Ongrade_levelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student_In_Class", Storage="_Student_In_Classes", ThisKey="school_name,grade_level,name", OtherKey="school_name,grade_level,class_name")]
		public EntitySet<Student_In_Class> Student_In_Classes
		{
			get
			{
				return this._Student_In_Classes;
			}
			set
			{
				this._Student_In_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Teacher_In_Class", Storage="_Teacher_In_Classes", ThisKey="school_name,grade_level,name", OtherKey="school_name,grade_level,class_name")]
		public EntitySet<Teacher_In_Class> Teacher_In_Classes
		{
			get
			{
				return this._Teacher_In_Classes;
			}
			set
			{
				this._Teacher_In_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Level_Class", Storage="_Grade_Level1", ThisKey="school_name,grade_level", OtherKey="school_name,level", IsForeignKey=true)]
		public Grade_Level Grade_Level1
		{
			get
			{
				return this._Grade_Level1.Entity;
			}
			set
			{
				Grade_Level previousValue = this._Grade_Level1.Entity;
				if (((previousValue != value) 
							|| (this._Grade_Level1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade_Level1.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Grade_Level1.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._school_name = value.school_name;
						this._grade_level = value.level;
					}
					else
					{
						this._school_name = default(string);
						this._grade_level = default(int);
					}
					this.SendPropertyChanged("Grade_Level1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student_In_Classes(Student_In_Class entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Student_In_Classes(Student_In_Class entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Teacher_In_Classes(Teacher_In_Class entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Teacher_In_Classes(Teacher_In_Class entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _comment_ID;
		
		private int _game_ID;
		
		private int _Auther_ID;
		
		private int _body;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncomment_IDChanging(int value);
    partial void Oncomment_IDChanged();
    partial void Ongame_IDChanging(int value);
    partial void Ongame_IDChanged();
    partial void OnAuther_IDChanging(int value);
    partial void OnAuther_IDChanged();
    partial void OnbodyChanging(int value);
    partial void OnbodyChanged();
    #endregion
		
		public Comment()
		{
			this._Game = default(EntityRef<Game>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int comment_ID
		{
			get
			{
				return this._comment_ID;
			}
			set
			{
				if ((this._comment_ID != value))
				{
					this.Oncomment_IDChanging(value);
					this.SendPropertyChanging();
					this._comment_ID = value;
					this.SendPropertyChanged("comment_ID");
					this.Oncomment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int game_ID
		{
			get
			{
				return this._game_ID;
			}
			set
			{
				if ((this._game_ID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongame_IDChanging(value);
					this.SendPropertyChanging();
					this._game_ID = value;
					this.SendPropertyChanged("game_ID");
					this.Ongame_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Auther_ID", DbType="Int NOT NULL")]
		public int Auther_ID
		{
			get
			{
				return this._Auther_ID;
			}
			set
			{
				if ((this._Auther_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuther_IDChanging(value);
					this.SendPropertyChanging();
					this._Auther_ID = value;
					this.SendPropertyChanged("Auther_ID");
					this.OnAuther_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_body", DbType="Int NOT NULL")]
		public int body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Comment", Storage="_Game", ThisKey="game_ID", OtherKey="game_ID", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._game_ID = value.game_ID;
					}
					else
					{
						this._game_ID = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="Auther_ID", OtherKey="user_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._Auther_ID = value.user_ID;
					}
					else
					{
						this._Auther_ID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _game_ID;
		
		private string _name;
		
		private string _description;
		
		private System.DateTime _publish_date;
		
		private int _creator_ID;
		
		private int _amount_of_likes;
		
		private int _grade_level;
		
		private string _category;
		
		private string _teacher_comment;
		
		private string _subject_name;
		
		private EntitySet<Activity> _Activities;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Category> _Category1;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongame_IDChanging(int value);
    partial void Ongame_IDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onpublish_dateChanging(System.DateTime value);
    partial void Onpublish_dateChanged();
    partial void Oncreator_IDChanging(int value);
    partial void Oncreator_IDChanged();
    partial void Onamount_of_likesChanging(int value);
    partial void Onamount_of_likesChanged();
    partial void Ongrade_levelChanging(int value);
    partial void Ongrade_levelChanged();
    partial void OncategoryChanging(string value);
    partial void OncategoryChanged();
    partial void Onteacher_commentChanging(string value);
    partial void Onteacher_commentChanged();
    partial void Onsubject_nameChanging(string value);
    partial void Onsubject_nameChanged();
    #endregion
		
		public Game()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Category1 = default(EntityRef<Category>);
			this._Subject = default(EntityRef<Subject>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int game_ID
		{
			get
			{
				return this._game_ID;
			}
			set
			{
				if ((this._game_ID != value))
				{
					this.Ongame_IDChanging(value);
					this.SendPropertyChanging();
					this._game_ID = value;
					this.SendPropertyChanged("game_ID");
					this.Ongame_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publish_date", DbType="Date NOT NULL")]
		public System.DateTime publish_date
		{
			get
			{
				return this._publish_date;
			}
			set
			{
				if ((this._publish_date != value))
				{
					this.Onpublish_dateChanging(value);
					this.SendPropertyChanging();
					this._publish_date = value;
					this.SendPropertyChanged("publish_date");
					this.Onpublish_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator_ID", DbType="Int NOT NULL")]
		public int creator_ID
		{
			get
			{
				return this._creator_ID;
			}
			set
			{
				if ((this._creator_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncreator_IDChanging(value);
					this.SendPropertyChanging();
					this._creator_ID = value;
					this.SendPropertyChanged("creator_ID");
					this.Oncreator_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount_of_likes", DbType="Int NOT NULL")]
		public int amount_of_likes
		{
			get
			{
				return this._amount_of_likes;
			}
			set
			{
				if ((this._amount_of_likes != value))
				{
					this.Onamount_of_likesChanging(value);
					this.SendPropertyChanging();
					this._amount_of_likes = value;
					this.SendPropertyChanged("amount_of_likes");
					this.Onamount_of_likesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade_level", DbType="Int NOT NULL")]
		public int grade_level
		{
			get
			{
				return this._grade_level;
			}
			set
			{
				if ((this._grade_level != value))
				{
					this.Ongrade_levelChanging(value);
					this.SendPropertyChanging();
					this._grade_level = value;
					this.SendPropertyChanged("grade_level");
					this.Ongrade_levelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_category", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string category
		{
			get
			{
				return this._category;
			}
			set
			{
				if ((this._category != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryChanging(value);
					this.SendPropertyChanging();
					this._category = value;
					this.SendPropertyChanged("category");
					this.OncategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacher_comment", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string teacher_comment
		{
			get
			{
				return this._teacher_comment;
			}
			set
			{
				if ((this._teacher_comment != value))
				{
					this.Onteacher_commentChanging(value);
					this.SendPropertyChanging();
					this._teacher_comment = value;
					this.SendPropertyChanged("teacher_comment");
					this.Onteacher_commentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string subject_name
		{
			get
			{
				return this._subject_name;
			}
			set
			{
				if ((this._subject_name != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsubject_nameChanging(value);
					this.SendPropertyChanging();
					this._subject_name = value;
					this.SendPropertyChanged("subject_name");
					this.Onsubject_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Activity", Storage="_Activities", ThisKey="game_ID", OtherKey="game_ID")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Comment", Storage="_Comments", ThisKey="game_ID", OtherKey="game_ID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Game", Storage="_Category1", ThisKey="category", OtherKey="name", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._category = value.name;
					}
					else
					{
						this._category = default(string);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Game", Storage="_Subject", ThisKey="subject_name", OtherKey="name", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._subject_name = value.name;
					}
					else
					{
						this._subject_name = default(string);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Game", Storage="_User", ThisKey="creator_ID", OtherKey="user_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._creator_ID = value.user_ID;
					}
					else
					{
						this._creator_ID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grade_Level")]
	public partial class Grade_Level : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _school_name;
		
		private int _level;
		
		private EntitySet<Class> _Classes;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onschool_nameChanging(string value);
    partial void Onschool_nameChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    #endregion
		
		public Grade_Level()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string school_name
		{
			get
			{
				return this._school_name;
			}
			set
			{
				if ((this._school_name != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onschool_nameChanging(value);
					this.SendPropertyChanging();
					this._school_name = value;
					this.SendPropertyChanged("school_name");
					this.Onschool_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Level_Class", Storage="_Classes", ThisKey="school_name,level", OtherKey="school_name,grade_level")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_Grade_Level", Storage="_School", ThisKey="school_name", OtherKey="name", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.Grade_Levels.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.Grade_Levels.Add(this);
						this._school_name = value.name;
					}
					else
					{
						this._school_name = default(string);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Grade_Level1 = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Grade_Level1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Metrics_Rating")]
	public partial class Metrics_Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _subject_name;
		
		private string _measure;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsubject_nameChanging(string value);
    partial void Onsubject_nameChanged();
    partial void OnmeasureChanging(string value);
    partial void OnmeasureChanged();
    #endregion
		
		public Metrics_Rating()
		{
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string subject_name
		{
			get
			{
				return this._subject_name;
			}
			set
			{
				if ((this._subject_name != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsubject_nameChanging(value);
					this.SendPropertyChanging();
					this._subject_name = value;
					this.SendPropertyChanged("subject_name");
					this.Onsubject_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_measure", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string measure
		{
			get
			{
				return this._measure;
			}
			set
			{
				if ((this._measure != value))
				{
					this.OnmeasureChanging(value);
					this.SendPropertyChanging();
					this._measure = value;
					this.SendPropertyChanged("measure");
					this.OnmeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Metrics_Rating", Storage="_Subject", ThisKey="subject_name", OtherKey="name", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Metrics_Ratings.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Metrics_Ratings.Add(this);
						this._subject_name = value.name;
					}
					else
					{
						this._subject_name = default(string);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.School")]
	public partial class School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private EntitySet<Grade_Level> _Grade_Levels;
		
		private EntitySet<System_Administor> _System_Administors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public School()
		{
			this._Grade_Levels = new EntitySet<Grade_Level>(new Action<Grade_Level>(this.attach_Grade_Levels), new Action<Grade_Level>(this.detach_Grade_Levels));
			this._System_Administors = new EntitySet<System_Administor>(new Action<System_Administor>(this.attach_System_Administors), new Action<System_Administor>(this.detach_System_Administors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_Grade_Level", Storage="_Grade_Levels", ThisKey="name", OtherKey="school_name")]
		public EntitySet<Grade_Level> Grade_Levels
		{
			get
			{
				return this._Grade_Levels;
			}
			set
			{
				this._Grade_Levels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_System_Administor", Storage="_System_Administors", ThisKey="name", OtherKey="school_name")]
		public EntitySet<System_Administor> System_Administors
		{
			get
			{
				return this._System_Administors;
			}
			set
			{
				this._System_Administors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grade_Levels(Grade_Level entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_Grade_Levels(Grade_Level entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_System_Administors(System_Administor entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_System_Administors(System_Administor entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_In_Class")]
	public partial class Student_In_Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_ID;
		
		private string _school_name;
		
		private int _grade_level;
		
		private string _class_name;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_IDChanging(int value);
    partial void Onuser_IDChanged();
    partial void Onschool_nameChanging(string value);
    partial void Onschool_nameChanged();
    partial void Ongrade_levelChanging(int value);
    partial void Ongrade_levelChanged();
    partial void Onclass_nameChanging(string value);
    partial void Onclass_nameChanged();
    #endregion
		
		public Student_In_Class()
		{
			this._Class = default(EntityRef<Class>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_ID
		{
			get
			{
				return this._user_ID;
			}
			set
			{
				if ((this._user_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_IDChanging(value);
					this.SendPropertyChanging();
					this._user_ID = value;
					this.SendPropertyChanged("user_ID");
					this.Onuser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string school_name
		{
			get
			{
				return this._school_name;
			}
			set
			{
				if ((this._school_name != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onschool_nameChanging(value);
					this.SendPropertyChanging();
					this._school_name = value;
					this.SendPropertyChanged("school_name");
					this.Onschool_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade_level", DbType="Int NOT NULL")]
		public int grade_level
		{
			get
			{
				return this._grade_level;
			}
			set
			{
				if ((this._grade_level != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongrade_levelChanging(value);
					this.SendPropertyChanging();
					this._grade_level = value;
					this.SendPropertyChanged("grade_level");
					this.Ongrade_levelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_class_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string class_name
		{
			get
			{
				return this._class_name;
			}
			set
			{
				if ((this._class_name != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclass_nameChanging(value);
					this.SendPropertyChanging();
					this._class_name = value;
					this.SendPropertyChanged("class_name");
					this.Onclass_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Student_In_Class", Storage="_Class", ThisKey="school_name,grade_level,class_name", OtherKey="school_name,grade_level,name", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Student_In_Classes.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Student_In_Classes.Add(this);
						this._school_name = value.school_name;
						this._grade_level = value.grade_level;
						this._class_name = value.name;
					}
					else
					{
						this._school_name = default(string);
						this._grade_level = default(int);
						this._class_name = default(string);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Student_In_Class", Storage="_User", ThisKey="user_ID", OtherKey="user_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Student_In_Class = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Student_In_Class = this;
						this._user_ID = value.user_ID;
					}
					else
					{
						this._user_ID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private EntitySet<Category_In_Subject> _Category_In_Subjects;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<Metrics_Rating> _Metrics_Ratings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Subject()
		{
			this._Category_In_Subjects = new EntitySet<Category_In_Subject>(new Action<Category_In_Subject>(this.attach_Category_In_Subjects), new Action<Category_In_Subject>(this.detach_Category_In_Subjects));
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._Metrics_Ratings = new EntitySet<Metrics_Rating>(new Action<Metrics_Rating>(this.attach_Metrics_Ratings), new Action<Metrics_Rating>(this.detach_Metrics_Ratings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Category_In_Subject", Storage="_Category_In_Subjects", ThisKey="name", OtherKey="subjectName")]
		public EntitySet<Category_In_Subject> Category_In_Subjects
		{
			get
			{
				return this._Category_In_Subjects;
			}
			set
			{
				this._Category_In_Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Game", Storage="_Games", ThisKey="name", OtherKey="subject_name")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Metrics_Rating", Storage="_Metrics_Ratings", ThisKey="name", OtherKey="subject_name")]
		public EntitySet<Metrics_Rating> Metrics_Ratings
		{
			get
			{
				return this._Metrics_Ratings;
			}
			set
			{
				this._Metrics_Ratings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_In_Subjects(Category_In_Subject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Category_In_Subjects(Category_In_Subject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Metrics_Ratings(Metrics_Rating entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Metrics_Ratings(Metrics_Rating entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.System_Administor")]
	public partial class System_Administor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _school_name;
		
		private int _user_ID;
		
		private EntityRef<School> _School;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onschool_nameChanging(string value);
    partial void Onschool_nameChanged();
    partial void Onuser_IDChanging(int value);
    partial void Onuser_IDChanged();
    #endregion
		
		public System_Administor()
		{
			this._School = default(EntityRef<School>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string school_name
		{
			get
			{
				return this._school_name;
			}
			set
			{
				if ((this._school_name != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onschool_nameChanging(value);
					this.SendPropertyChanging();
					this._school_name = value;
					this.SendPropertyChanged("school_name");
					this.Onschool_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_ID
		{
			get
			{
				return this._user_ID;
			}
			set
			{
				if ((this._user_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_IDChanging(value);
					this.SendPropertyChanging();
					this._user_ID = value;
					this.SendPropertyChanged("user_ID");
					this.Onuser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_System_Administor", Storage="_School", ThisKey="school_name", OtherKey="name", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.System_Administors.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.System_Administors.Add(this);
						this._school_name = value.name;
					}
					else
					{
						this._school_name = default(string);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_System_Administor", Storage="_User", ThisKey="user_ID", OtherKey="user_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.System_Administors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.System_Administors.Add(this);
						this._user_ID = value.user_ID;
					}
					else
					{
						this._user_ID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher_In_Class")]
	public partial class Teacher_In_Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_ID;
		
		private string _subject;
		
		private string _school_name;
		
		private int _grade_level;
		
		private string _class_name;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_IDChanging(int value);
    partial void Onuser_IDChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void Onschool_nameChanging(string value);
    partial void Onschool_nameChanged();
    partial void Ongrade_levelChanging(int value);
    partial void Ongrade_levelChanged();
    partial void Onclass_nameChanging(string value);
    partial void Onclass_nameChanged();
    #endregion
		
		public Teacher_In_Class()
		{
			this._Class = default(EntityRef<Class>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_ID
		{
			get
			{
				return this._user_ID;
			}
			set
			{
				if ((this._user_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_IDChanging(value);
					this.SendPropertyChanging();
					this._user_ID = value;
					this.SendPropertyChanged("user_ID");
					this.Onuser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string school_name
		{
			get
			{
				return this._school_name;
			}
			set
			{
				if ((this._school_name != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onschool_nameChanging(value);
					this.SendPropertyChanging();
					this._school_name = value;
					this.SendPropertyChanged("school_name");
					this.Onschool_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_grade_level", DbType="Int NOT NULL")]
		public int grade_level
		{
			get
			{
				return this._grade_level;
			}
			set
			{
				if ((this._grade_level != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongrade_levelChanging(value);
					this.SendPropertyChanging();
					this._grade_level = value;
					this.SendPropertyChanged("grade_level");
					this.Ongrade_levelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_class_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string class_name
		{
			get
			{
				return this._class_name;
			}
			set
			{
				if ((this._class_name != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclass_nameChanging(value);
					this.SendPropertyChanging();
					this._class_name = value;
					this.SendPropertyChanged("class_name");
					this.Onclass_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Teacher_In_Class", Storage="_Class", ThisKey="school_name,grade_level,class_name", OtherKey="school_name,grade_level,name", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Teacher_In_Classes.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Teacher_In_Classes.Add(this);
						this._school_name = value.school_name;
						this._grade_level = value.grade_level;
						this._class_name = value.name;
					}
					else
					{
						this._school_name = default(string);
						this._grade_level = default(int);
						this._class_name = default(string);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Teacher_In_Class", Storage="_User", ThisKey="user_ID", OtherKey="user_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Teacher_In_Class = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Teacher_In_Class = this;
						this._user_ID = value.user_ID;
					}
					else
					{
						this._user_ID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type_of_users")]
	public partial class Type_of_user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Type_of_user()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_of_user_User", Storage="_Users", ThisKey="name", OtherKey="type")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Type_of_user = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Type_of_user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_ID;
		
		private string _name;
		
		private string _password;
		
		private string _type;
		
		private int _activities_Num;
		
		private EntitySet<Activity> _Activities;
		
		private EntitySet<Activity> _Activities1;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Game> _Games;
		
		private EntityRef<Student_In_Class> _Student_In_Class;
		
		private EntitySet<System_Administor> _System_Administors;
		
		private EntityRef<Teacher_In_Class> _Teacher_In_Class;
		
		private EntityRef<Type_of_user> _Type_of_user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_IDChanging(int value);
    partial void Onuser_IDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Onactivities_NumChanging(int value);
    partial void Onactivities_NumChanged();
    #endregion
		
		public User()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._Activities1 = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities1), new Action<Activity>(this.detach_Activities1));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._Student_In_Class = default(EntityRef<Student_In_Class>);
			this._System_Administors = new EntitySet<System_Administor>(new Action<System_Administor>(this.attach_System_Administors), new Action<System_Administor>(this.detach_System_Administors));
			this._Teacher_In_Class = default(EntityRef<Teacher_In_Class>);
			this._Type_of_user = default(EntityRef<Type_of_user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_ID
		{
			get
			{
				return this._user_ID;
			}
			set
			{
				if ((this._user_ID != value))
				{
					this.Onuser_IDChanging(value);
					this.SendPropertyChanging();
					this._user_ID = value;
					this.SendPropertyChanged("user_ID");
					this.Onuser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._Type_of_user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_activities_Num", DbType="Int NOT NULL")]
		public int activities_Num
		{
			get
			{
				return this._activities_Num;
			}
			set
			{
				if ((this._activities_Num != value))
				{
					this.Onactivities_NumChanging(value);
					this.SendPropertyChanging();
					this._activities_Num = value;
					this.SendPropertyChanged("activities_Num");
					this.Onactivities_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Activity", Storage="_Activities", ThisKey="user_ID", OtherKey="user_ID_receive")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Activity1", Storage="_Activities1", ThisKey="user_ID", OtherKey="user_ID_send")]
		public EntitySet<Activity> Activities1
		{
			get
			{
				return this._Activities1;
			}
			set
			{
				this._Activities1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="user_ID", OtherKey="Auther_ID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Game", Storage="_Games", ThisKey="user_ID", OtherKey="creator_ID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Student_In_Class", Storage="_Student_In_Class", ThisKey="user_ID", OtherKey="user_ID", IsUnique=true, IsForeignKey=false)]
		public Student_In_Class Student_In_Class
		{
			get
			{
				return this._Student_In_Class.Entity;
			}
			set
			{
				Student_In_Class previousValue = this._Student_In_Class.Entity;
				if (((previousValue != value) 
							|| (this._Student_In_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_In_Class.Entity = null;
						previousValue.User = null;
					}
					this._Student_In_Class.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Student_In_Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_System_Administor", Storage="_System_Administors", ThisKey="user_ID", OtherKey="user_ID")]
		public EntitySet<System_Administor> System_Administors
		{
			get
			{
				return this._System_Administors;
			}
			set
			{
				this._System_Administors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Teacher_In_Class", Storage="_Teacher_In_Class", ThisKey="user_ID", OtherKey="user_ID", IsUnique=true, IsForeignKey=false)]
		public Teacher_In_Class Teacher_In_Class
		{
			get
			{
				return this._Teacher_In_Class.Entity;
			}
			set
			{
				Teacher_In_Class previousValue = this._Teacher_In_Class.Entity;
				if (((previousValue != value) 
							|| (this._Teacher_In_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher_In_Class.Entity = null;
						previousValue.User = null;
					}
					this._Teacher_In_Class.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Teacher_In_Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_of_user_User", Storage="_Type_of_user", ThisKey="type", OtherKey="name", IsForeignKey=true)]
		public Type_of_user Type_of_user
		{
			get
			{
				return this._Type_of_user.Entity;
			}
			set
			{
				Type_of_user previousValue = this._Type_of_user.Entity;
				if (((previousValue != value) 
							|| (this._Type_of_user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type_of_user.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Type_of_user.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._type = value.name;
					}
					else
					{
						this._type = default(string);
					}
					this.SendPropertyChanged("Type_of_user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Activities1(Activity entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Activities1(Activity entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_System_Administors(System_Administor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_System_Administors(System_Administor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
